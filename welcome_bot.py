from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CallbackContext, CommandHandler, CallbackQueryHandler
import os
import logging
import requests

# –¢–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "8128088643:AAFX6vFLh8HAlcm_IxBS4DJzGdbyirQAiWc"

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É
CHANNEL_USERNAME = "Doroga_k_Yoga"
GROUP_USERNAME = "chatdorogakyoga"

# ID —á–∞—Ç–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)
BOT_MENU_LINK = "https://t.me/YogaWelcomebot?start=go"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")],
        [InlineKeyboardButton("üí¨ –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç", url=f"https://t.me/{GROUP_USERNAME}")],
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check")]
    ])

    text = (
        f"–ø—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'} ü§ç\n\n"
        "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –π–æ–≥–∏ –∏ —Ç—ë–ø–ª–æ–≥–æ –æ–±—â–µ–Ω–∏—è üåø\n\n"
        "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
        "1. –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É\n"
        "2. –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´—è –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª"
    )
    update.message.reply_text(text, reply_markup=keyboard)

def check_subscription(user_id):
    def is_member(username):
        url = f"https://api.telegram.org/bot{TOKEN}/getChatMember"
        response = requests.get(url, params={"chat_id": f"@{username}", "user_id": user_id})
        if response.ok:
            status = response.json()["result"]["status"]
            return status in ["member", "administrator", "creator"]
        return False

    return is_member(CHANNEL_USERNAME) and is_member(GROUP_USERNAME)

def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "check":
        if check_subscription(user_id):
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üåø –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", url=BOT_MENU_LINK)]
            ])
            query.edit_message_text(
                "—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É ü§ç\n—Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞:",
                reply_markup=keyboard
            )
        else:
            query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üôà", show_alert=True)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_callback))

    print("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
